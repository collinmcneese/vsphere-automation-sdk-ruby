# Copyright (c) 2018-2019 VMware, Inc.  All Rights Reserved.
# SPDX-License-Identifier: MIT

# DO NOT MODIFY. THIS CODE IS GENERATED. CHANGES WILL BE OVERWRITTEN.

# vcenter - VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments


require 'spec_helper'
require 'json'

# Unit tests for VSphereAutomation::VCenter::NamespacesAccessApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'NamespacesAccessApi' do
  before do
    # run before each test
    @instance = VSphereAutomation::VCenter::NamespacesAccessApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of NamespacesAccessApi' do
    it 'should create an instance of NamespacesAccessApi' do
      expect(@instance).to be_instance_of(VSphereAutomation::VCenter::NamespacesAccessApi)
    end
  end

  # unit tests for create
  # Set up access control for the subject on given domain on the namespace.
  # @param namespace Identifier for the namespace. The parameter must be an identifier for the resource type: vcenter.namespaces.Instance.
  # @param domain The domain of the subject.
  # @param subject The principal for this operation.
  # @param type { 1. The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace. }, { 2. The type of subject (user or group). }
  # @param [Hash] opts the optional parameters
  # @option opts [VcenterNamespacesAccessCreateSpec] :request_body 
  # @return [nil]
  describe 'create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete
  # Remove access control of the subject on given domain from the namespace.
  # @param namespace Identifier for the namespace. The parameter must be an identifier for the resource type: vcenter.namespaces.Instance.
  # @param domain The domain of the subject.
  # @param subject The principal for this operation.
  # @param type { 1. The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace. }, { 2. The type of subject (user or group). }
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get
  # Get the information about the access control of the subject on given domain on the namespace.
  # @param namespace Identifier for the namespace. The parameter must be an identifier for the resource type: vcenter.namespaces.Instance.
  # @param domain The domain of the subject.
  # @param subject The principal for this operation.
  # @param type { 1. The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace. }, { 2. The type of subject (user or group). }
  # @param [Hash] opts the optional parameters
  # @return [VcenterNamespacesAccessInfo]
  describe 'get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set
  # Set new access control on the namespace for the subject on given domain.
  # @param namespace Identifier for the namespace. The parameter must be an identifier for the resource type: vcenter.namespaces.Instance.
  # @param domain The domain of the subject.
  # @param subject The principal for this operation.
  # @param type { 1. The Access.SubjectType enumerated type lists the types of subjects who can be associated with a Access.Role on the namespace. }, { 2. The type of subject (user or group). }
  # @param [Hash] opts the optional parameters
  # @option opts [VcenterNamespacesAccessSetSpec] :request_body 
  # @return [nil]
  describe 'set test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
