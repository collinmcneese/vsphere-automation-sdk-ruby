#!/usr/bin/env ruby

require 'bundler/setup'
require 'optparse'
require 'vsphere-automation-cis'
require 'vsphere-automation-content'
require 'vsphere-automation-vcenter'

options = { insecure: false }
OptionParser.new do |opts|
  opts.on('-s SERVER', '--server SERVER', 'vCenter server to use') do |s|
    options[:server] = s
  end

  opts.on('-u USERNAME', '--username USERNAME', 'username to use') do |u|
    options[:username] = u
  end

  opts.on('-p PASSWORD', '--password PASSWORD', 'password to use') do |p|
    options[:password] = p
  end

  opts.on('-k', '--insecure', 'skip certificate validation') do |k|
    options[:insecure] = k
  end

  opts.on('-d DATASTORE', '--datastore-name DATASTORE', 'datastore to use') do |d|
    options[:datastore] = d
  end

  opts.on('-n NAME', '--name NAME', 'name to use') do |n|
    options[:name] = n
  end
end.parse!

configuration = VSphereAutomation::Configuration.new.tap do |c|
  c.host = options[:server]
  c.username = options[:username]
  c.password = options[:password]
  c.scheme = 'https'
  c.verify_ssl = !options[:insecure]
  c.verify_ssl_host = !options[:insecure]
end

api_client = VSphereAutomation::ApiClient.new(configuration)
VSphereAutomation::CIS::SessionApi.new(api_client).create('')
datastore_api = VSphereAutomation::VCenter::DatastoreApi.new(api_client)
datastore = datastore_api.list(filter_name: options[:datastore]).value.first

storage_backing = VSphereAutomation::Content::ContentLibraryStorageBacking.new(
  datastore_id: datastore.datastore,
  type: VSphereAutomation::Content::ContentLibraryStorageBackingType::DATASTORE
)

create_model = VSphereAutomation::Content::ContentLocalLibraryCreate.new(
  create_spec: VSphereAutomation::Content::ContentLibraryModel.new(
    name: options[:name],
    storage_backings: [storage_backing]
  )
)

local_library_api = VSphereAutomation::Content::LocalLibraryApi.new(api_client)
local_library_id = local_library_api.create(content_local_library_create: create_model).value
puts "Library ID: #{local_library_id}"
