#!/usr/bin/env ruby

require 'bundler/setup'
require 'optparse'
require 'vsphere-automation-vcenter'
require 'vsphere-automation-cis'

options = { insecure: false }
OptionParser.new do |opts|
  opts.on('-s SERVER', '--server SERVER', 'vCenter server to use') do |s|
    options[:server] = s
  end

  opts.on('-u USERNAME', '--username USERNAME', 'username to use') do |u|
    options[:username] = u
  end

  opts.on('-p PASSWORD', '--password PASSWORD', 'password to use') do |p|
    options[:password] = p
  end

  opts.on('-k', '--insecure', 'skip certificate validation') do |k|
    options[:insecure] = k
  end

  opts.on('-c CLUSTER', '--cluster CLUSTER', 'name of cluster to use') do |c|
    options[:cluster] = c
  end

  opts.on('-d DATASTORE', '--datastore DATASTORE', 'name of datastore to use') do |d|
    options[:datastore] = d
  end

  opts.on('-f FOLDER', '--folder FOLDER', 'name of folder to use') do |f|
    options[:folder] = f
  end

  opts.on('-n NAME', '--name NAME', 'name of VM to be created') do |n|
    options[:vm] = n
  end

  opts.on('--datacenter DATACENTER', 'name of datacenter to use') do |dc|
    options[:datacenter] = dc
  end
end.parse!

%i[server username password cluster datastore folder datacenter].each do |o|
  raise(ArgumentError, "'#{o}' is required") unless options[o]
end

configuration = VSphereAutomation::Configuration.new.tap do |c|
  c.host = options[:server]
  c.username = options[:username]
  c.password = options[:password]
  c.scheme = 'https'
  c.verify_ssl = !options[:insecure]
  c.verify_ssl_host = !options[:insecure]
end

api_client = VSphereAutomation::ApiClient.new(configuration)
VSphereAutomation::CIS::SessionApi.new(api_client).create('')

datacenter_api = VSphereAutomation::VCenter::DatacenterApi.new(api_client)
cluster_api = VSphereAutomation::VCenter::ClusterApi.new(api_client)
datastore_api = VSphereAutomation::VCenter::DatastoreApi.new(api_client)
folder_api = VSphereAutomation::VCenter::FolderApi.new(api_client)
vm_api = VSphereAutomation::VCenter::VMApi.new(api_client)

puts "Looking for #{options[:datacenter]}"
datacenter = datacenter_api.list(filter_names: [options[:datacenter]]).value.first.datacenter
puts "Found #{datacenter}"

puts "Looking for #{options[:cluster]} in #{datacenter}"
cluster = cluster_api.list(filter_names: [options[:cluster]],
                           filter_datacenters: [datacenter]).value.first.cluster
puts "Found #{cluster}"

puts "Looking for #{options[:datastore]} in #{datacenter}"
datastore = datastore_api.list(filter_names: [options[:datastore]],
                               filter_datacenters: [datacenter]).value.first.datastore
puts "Found #{datastore}"

puts "Looking for #{options[:folder]} in #{datacenter}"
folder = folder_api.list(filter_names: [options[:folder]],
                         filter_type: VSphereAutomation::VCenter::VcenterFolderType::VIRTUAL_MACHINE,
                         filter_datacenters: [datacenter]).value.first.folder
puts "Found #{folder}"

guest_os = VSphereAutomation::VCenter::VcenterVmGuestOS::OTHER
placement_spec = VSphereAutomation::VCenter::VcenterVMPlacementSpec.new(
  cluster: cluster,
  datastore: datastore,
  folder: folder
)
create_spec = VSphereAutomation::VCenter::VcenterVMCreateSpec.new(
  guest_OS: guest_os,
  name: options[:vm],
  placement: placement_spec
)
create_model = VSphereAutomation::VCenter::VcenterVMCreate.new(spec: create_spec)

vm = vm_api.create(create_model).value

puts "Created VM: #{vm}"
