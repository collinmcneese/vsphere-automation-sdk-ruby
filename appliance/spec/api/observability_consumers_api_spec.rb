# Copyright (c) 2018-2019 VMware, Inc.  All Rights Reserved.
# SPDX-License-Identifier: MIT

# DO NOT MODIFY. THIS CODE IS GENERATED. CHANGES WILL BE OVERWRITTEN.

# appliance - The vCenter Server Appliance is a preconfigured Linux-based virtual machine optimized for running vCenter Server and associated services.


require 'spec_helper'
require 'json'

# Unit tests for VSphereAutomation::Appliance::ObservabilityConsumersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ObservabilityConsumersApi' do
  before do
    # run before each test
    @instance = VSphereAutomation::Appliance::ObservabilityConsumersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ObservabilityConsumersApi' do
    it 'should create an instance of ObservabilityConsumersApi' do
      expect(@instance).to be_instance_of(VSphereAutomation::Appliance::ObservabilityConsumersApi)
    end
  end

  # unit tests for create
  # Adds consumer for subscribing to observability data stream. if you do not have all of the privileges described as follows:     -  Operation execution requires Observability.Admin.  
  # @param [Hash] opts the optional parameters
  # @option opts [ApplianceObservabilityConsumersCreateSpec] :request_body 
  # @return [nil]
  describe 'create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete
  # Removes the consumer from observability data subscription. if you do not have all of the privileges described as follows:     -  Operation execution requires Observability.Admin.  
  # @param name Identifier of the consumer to be removed. The parameter must be an identifier for the resource type: appliance.observability.consumer.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get
  # Gets subscription enable status and subscribed topics of particular consumer. if you do not have all of the privileges described as follows:     -  Operation execution requires Observability.Admin.  
  # @param name Identifier of the consumer for which information will be returned. The parameter must be an identifier for the resource type: appliance.observability.consumer.
  # @param [Hash] opts the optional parameters
  # @return [ApplianceObservabilityConsumersInfo]
  describe 'get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list
  # Lists all the subscribed consumers for Observability data stream. if you do not have all of the privileges described as follows:     -  Operation execution requires Observability.Admin.  
  # @param [Hash] opts the optional parameters
  # @return [Array<ApplianceObservabilityConsumersSummary>]
  describe 'list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update
  # Updates an observability subscriber details like subscription topics or enablement status (Status) to enable or disable from listening to data stream. if you do not have all of the privileges described as follows:     -  Operation execution requires Observability.Admin.  
  # @param name Identifier of the consumer to be updated. The parameter must be an identifier for the resource type: appliance.observability.consumer.
  # @param [Hash] opts the optional parameters
  # @option opts [ApplianceObservabilityConsumersUpdateSpec] :request_body 
  # @return [nil]
  describe 'update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
