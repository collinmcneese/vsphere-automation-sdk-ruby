# Copyright (c) 2018-2019 VMware, Inc.  All Rights Reserved.
# SPDX-License-Identifier: MIT

# DO NOT MODIFY. THIS CODE IS GENERATED. CHANGES WILL BE OVERWRITTEN.

# stats - No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)


require 'uri'

module VSphereAutomation
  module VStats
  class EndpointsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a new endpoint record. Warning: This operation is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
    # @param [Hash] opts the optional parameters
    # @option opts [VstatsEndpointsCreateSpec] :request_body 
    # @return [String|VapiStdErrorsInvalidArgument|VapiStdErrorsUnauthenticated|VapiStdErrorsUnauthorized|VapiStdErrorsError|]
    def create(opts = {})
      data, _status_code, _headers = create_with_http_info(opts)
      data
    end

    # Creates a new endpoint record. Warning: This operation is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
    # @api private
    # @param [Hash] opts the optional parameters
    # @option opts [VstatsEndpointsCreateSpec] :request_body 
    # @return [Array<(String|VapiStdErrorsInvalidArgument|VapiStdErrorsUnauthenticated|VapiStdErrorsUnauthorized|VapiStdErrorsError|, Fixnum, Hash)>]  data, response status code and response headers
    def create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.create ...'
      end
      # resource path
      local_var_path = '/api/stats/endpoints'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request_body'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
	:return_type => {
	  '201' => 'VStats::String',
	  '400' => 'VStats::VapiStdErrorsInvalidArgument',
	  '401' => 'VStats::VapiStdErrorsUnauthenticated',
	  '403' => 'VStats::VapiStdErrorsUnauthorized',
	  '500' => 'VStats::VapiStdErrorsError',
	})
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes multiple endpoint configurations based on epids. Warning: This operation is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
    # @param epids Endpoint IDs. The parameter must contain identifiers for the resource type: vstats.model.Endpoint.
    # @param [Hash] opts the optional parameters
    # @return [|VapiStdErrorsInvalidArgument|VapiStdErrorsUnauthenticated|VapiStdErrorsUnauthorized|VapiStdErrorsNotFound|VapiStdErrorsError|nil]
    def delete(epids, opts = {})
      delete_with_http_info(epids, opts)
      nil
    end

    # Deletes multiple endpoint configurations based on epids. Warning: This operation is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
    # @api private
    # @param epids Endpoint IDs. The parameter must contain identifiers for the resource type: vstats.model.Endpoint.
    # @param [Hash] opts the optional parameters
    # @return [Array<(|VapiStdErrorsInvalidArgument|VapiStdErrorsUnauthenticated|VapiStdErrorsUnauthorized|VapiStdErrorsNotFound|VapiStdErrorsError|nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_with_http_info(epids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.delete ...'
      end
      # verify the required parameter 'epids' is set
      if @api_client.config.client_side_validation && epids.nil?
        fail ArgumentError, "Missing the required parameter 'epids' when calling EndpointsApi.delete"
      end
      # resource path
      local_var_path = '/api/stats/endpoints'

      # query parameters
      query_params = {}
      query_params[:'epids'] = @api_client.build_collection_param(epids, :csv)

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns information about all the endpoints configured with vStats. Warning: This operation is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Endpoint name filter. Warning: This attribute is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented. When unset the result will not be filtered by endpoint name.
    # @option opts [String] :push_data_format Push data format filter. Warning: This attribute is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented. When unset the result will not be filtered by push data format.
    # @option opts [String] :status Endpoint status filter. Warning: This attribute is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented. When unset the result will not be filtered by endpoint status.
    # @return [Array<VstatsEndpointsInfo>|VapiStdErrorsInvalidArgument|VapiStdErrorsUnauthenticated|VapiStdErrorsUnauthorized|VapiStdErrorsError|]
    def list(opts = {})
      data, _status_code, _headers = list_with_http_info(opts)
      data
    end

    # Returns information about all the endpoints configured with vStats. Warning: This operation is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
    # @api private
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Endpoint name filter. Warning: This attribute is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented. When unset the result will not be filtered by endpoint name.
    # @option opts [String] :push_data_format Push data format filter. Warning: This attribute is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented. When unset the result will not be filtered by push data format.
    # @option opts [String] :status Endpoint status filter. Warning: This attribute is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented. When unset the result will not be filtered by endpoint status.
    # @return [Array<(Array<VstatsEndpointsInfo>|VapiStdErrorsInvalidArgument|VapiStdErrorsUnauthenticated|VapiStdErrorsUnauthorized|VapiStdErrorsError|, Fixnum, Hash)>]  data, response status code and response headers
    def list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.list ...'
      end
      # resource path
      local_var_path = '/api/stats/endpoints'

      # query parameters
      query_params = {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'push_data_format'] = opts[:'push_data_format'] if !opts[:'push_data_format'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
	:return_type => {
	  '200' => 'VStats::Array<VstatsEndpointsInfo>',
	  '400' => 'VStats::VapiStdErrorsInvalidArgument',
	  '401' => 'VStats::VapiStdErrorsUnauthenticated',
	  '403' => 'VStats::VapiStdErrorsUnauthorized',
	  '500' => 'VStats::VapiStdErrorsError',
	})
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates an existing endpoint configuration. Warning: This operation is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
    # @param id Endpoint ID. The parameter must be an identifier for the resource type: vstats.model.Endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [VstatsEndpointsUpdateSpec] :request_body 
    # @return [|VapiStdErrorsInvalidArgument|VapiStdErrorsUnauthenticated|VapiStdErrorsUnauthorized|VapiStdErrorsNotFound|VapiStdErrorsError|nil]
    def update(id, opts = {})
      update_with_http_info(id, opts)
      nil
    end

    # Updates an existing endpoint configuration. Warning: This operation is part of a new feature in development. It may be changed at any time and may not have all supported functionality implemented.
    # @api private
    # @param id Endpoint ID. The parameter must be an identifier for the resource type: vstats.model.Endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [VstatsEndpointsUpdateSpec] :request_body 
    # @return [Array<(|VapiStdErrorsInvalidArgument|VapiStdErrorsUnauthenticated|VapiStdErrorsUnauthorized|VapiStdErrorsNotFound|VapiStdErrorsError|nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EndpointsApi.update ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EndpointsApi.update"
      end
      # resource path
      local_var_path = '/api/stats/endpoints/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request_body'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EndpointsApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
  end
end
