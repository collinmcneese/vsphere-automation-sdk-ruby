# Copyright (c) 2018-2019 VMware, Inc.  All Rights Reserved.
# SPDX-License-Identifier: MIT

# DO NOT MODIFY. THIS CODE IS GENERATED. CHANGES WILL BE OVERWRITTEN.

# esx - No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)


require 'uri'

module VSphereAutomation
  module ESX
  class SettingsHardwareSupportManagersPackagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns the list of available Hardware Support Packages (HSPs) for a particular host, as specified by its Hardware Support Manager (HSM)
    # @param manager Identifier for the Hardware Support Manager (HSM).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_image_version vSphere release version the Hardware Support Package (HSP) must support to match the filter. Only Hardware Support Packages (HSPs) compatible with the vSphere release version specified in &#39;baseImageVersion&#39; will be returned. The &#39;baseImageVersion&#39; parameter should be a full numeric base image version string (e.g. \&quot;7.1.0-2.3.436234\&quot;). Future implementations may support version specification by prefix (e.g. \&quot;7.1\&quot; to specify all updates and builds of 7.1) or other forms of specification (e.g. \&quot;&gt;&#x3D;7.0\&quot;). Hardware Support Pacakges (HSPs) may be advertised as supporting truncated version strings to indicate the remainder is wildcarded. Matching is on the specified substring only, so a bundle supporting \&quot;7.1.0-2\&quot; would match a &#39;release&#39; parameter of \&quot;7.1.0-2.3.436234\&quot; as well as \&quot;7.1.0-2.1.4133564\&quot; and \&quot;7.1.0-1.0.355667\&quot; but not \&quot;7.1.0-3.0.63445\&quot; or any base image version starting with \&quot;7.2\&quot;. Note that we require compatible base image versions be specified at least down to the update version (i.e. \&quot;7.0\&quot; is insufficiently constrained)
    # @return [Array<EsxSettingsHardwareSupportManagersPackagesHardwareSupportPackageInfo>|VapiStdErrorsUnauthenticated|VapiStdErrorsNotFound|VapiStdErrorsError|VapiStdErrorsServiceUnavailable|]
    def list(manager, opts = {})
      data, _status_code, _headers = list_with_http_info(manager, opts)
      data
    end

    # Returns the list of available Hardware Support Packages (HSPs) for a particular host, as specified by its Hardware Support Manager (HSM)
    # @api private
    # @param manager Identifier for the Hardware Support Manager (HSM).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :base_image_version vSphere release version the Hardware Support Package (HSP) must support to match the filter. Only Hardware Support Packages (HSPs) compatible with the vSphere release version specified in &#39;baseImageVersion&#39; will be returned. The &#39;baseImageVersion&#39; parameter should be a full numeric base image version string (e.g. \&quot;7.1.0-2.3.436234\&quot;). Future implementations may support version specification by prefix (e.g. \&quot;7.1\&quot; to specify all updates and builds of 7.1) or other forms of specification (e.g. \&quot;&gt;&#x3D;7.0\&quot;). Hardware Support Pacakges (HSPs) may be advertised as supporting truncated version strings to indicate the remainder is wildcarded. Matching is on the specified substring only, so a bundle supporting \&quot;7.1.0-2\&quot; would match a &#39;release&#39; parameter of \&quot;7.1.0-2.3.436234\&quot; as well as \&quot;7.1.0-2.1.4133564\&quot; and \&quot;7.1.0-1.0.355667\&quot; but not \&quot;7.1.0-3.0.63445\&quot; or any base image version starting with \&quot;7.2\&quot;. Note that we require compatible base image versions be specified at least down to the update version (i.e. \&quot;7.0\&quot; is insufficiently constrained)
    # @return [Array<(Array<EsxSettingsHardwareSupportManagersPackagesHardwareSupportPackageInfo>|VapiStdErrorsUnauthenticated|VapiStdErrorsNotFound|VapiStdErrorsError|VapiStdErrorsServiceUnavailable|, Fixnum, Hash)>]  data, response status code and response headers
    def list_with_http_info(manager, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsHardwareSupportManagersPackagesApi.list ...'
      end
      # verify the required parameter 'manager' is set
      if @api_client.config.client_side_validation && manager.nil?
        fail ArgumentError, "Missing the required parameter 'manager' when calling SettingsHardwareSupportManagersPackagesApi.list"
      end
      # resource path
      local_var_path = '/api/esx/settings/hardware-support/managers/{manager}/packages'.sub('{' + 'manager' + '}', manager.to_s)

      # query parameters
      query_params = {}
      query_params[:'base_image_version'] = opts[:'base_image_version'] if !opts[:'base_image_version'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
	:return_type => {
	  '200' => 'ESX::Array<EsxSettingsHardwareSupportManagersPackagesHardwareSupportPackageInfo>',
	  '401' => 'ESX::VapiStdErrorsUnauthenticated',
	  '404' => 'ESX::VapiStdErrorsNotFound',
	  '500' => 'ESX::VapiStdErrorsError',
	  '503' => 'ESX::VapiStdErrorsServiceUnavailable',
	})
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsHardwareSupportManagersPackagesApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
  end
end
