# Copyright (c) 2018-2019 VMware, Inc.  All Rights Reserved.
# SPDX-License-Identifier: MIT

# DO NOT MODIFY. THIS CODE IS GENERATED. CHANGES WILL BE OVERWRITTEN.

# esx - No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)


require 'date'

module VSphereAutomation
  module ESX
    class EsxSettingsHostCompliance
    attr_accessor :add_on

    attr_accessor :base_image

    # Identifier of the commit on which the scan is run to generate this result.
    attr_accessor :commit

    # Compliance result for all the effective components and all the components present on the host. The key is the component name and value is the ComponentCompliance.
    attr_accessor :components

    # Compliance result for hardware support (both Hardware Support Package or HSP and individual hardware module firmware) for every HSP configured, keyed by Hardware Support Manager (HSM).
    attr_accessor :hardware_support

    attr_accessor :impact

    attr_accessor :notifications

    # Scan completion time.
    attr_accessor :scan_time

    # Compliance result for solutions. The key is the solution name and value is the SolutionCompliance.
    attr_accessor :solutions

    attr_accessor :status

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'add_on' => :'add_on',
        :'base_image' => :'base_image',
        :'commit' => :'commit',
        :'components' => :'components',
        :'hardware_support' => :'hardware_support',
        :'impact' => :'impact',
        :'notifications' => :'notifications',
        :'scan_time' => :'scan_time',
        :'solutions' => :'solutions',
        :'status' => :'status'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'add_on' => :'EsxSettingsAddOnCompliance',
        :'base_image' => :'EsxSettingsBaseImageCompliance',
        :'commit' => :'String',
        :'components' => :'Hash<String, EsxSettingsComponentCompliance>',
        :'hardware_support' => :'Hash<String, EsxSettingsHardwareSupportPackageCompliance>',
        :'impact' => :'EsxSettingsComplianceImpact',
        :'notifications' => :'EsxSettingsNotifications',
        :'scan_time' => :'DateTime',
        :'solutions' => :'Hash<String, EsxSettingsSolutionCompliance>',
        :'status' => :'EsxSettingsComplianceStatus'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'add_on')
        self.add_on = attributes[:'add_on']
      end

      if attributes.has_key?(:'base_image')
        self.base_image = attributes[:'base_image']
      end

      if attributes.has_key?(:'commit')
        self.commit = attributes[:'commit']
      end

      if attributes.has_key?(:'components')
        if (value = attributes[:'components']).is_a?(Hash)
          self.components = value
        end
      end

      if attributes.has_key?(:'hardware_support')
        if (value = attributes[:'hardware_support']).is_a?(Hash)
          self.hardware_support = value
        end
      end

      if attributes.has_key?(:'impact')
        self.impact = attributes[:'impact']
      end

      if attributes.has_key?(:'notifications')
        self.notifications = attributes[:'notifications']
      end

      if attributes.has_key?(:'scan_time')
        self.scan_time = attributes[:'scan_time']
      end

      if attributes.has_key?(:'solutions')
        if (value = attributes[:'solutions']).is_a?(Hash)
          self.solutions = value
        end
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @add_on.nil?
        invalid_properties.push('invalid value for "add_on", add_on cannot be nil.')
      end

      if @base_image.nil?
        invalid_properties.push('invalid value for "base_image", base_image cannot be nil.')
      end

      if @components.nil?
        invalid_properties.push('invalid value for "components", components cannot be nil.')
      end

      if @impact.nil?
        invalid_properties.push('invalid value for "impact", impact cannot be nil.')
      end

      if @notifications.nil?
        invalid_properties.push('invalid value for "notifications", notifications cannot be nil.')
      end

      if @scan_time.nil?
        invalid_properties.push('invalid value for "scan_time", scan_time cannot be nil.')
      end

      if @solutions.nil?
        invalid_properties.push('invalid value for "solutions", solutions cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @add_on.nil?
      return false if @base_image.nil?
      return false if @components.nil?
      return false if @impact.nil?
      return false if @notifications.nil?
      return false if @scan_time.nil?
      return false if @solutions.nil?
      return false if @status.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          add_on == o.add_on &&
          base_image == o.base_image &&
          commit == o.commit &&
          components == o.components &&
          hardware_support == o.hardware_support &&
          impact == o.impact &&
          notifications == o.notifications &&
          scan_time == o.scan_time &&
          solutions == o.solutions &&
          status == o.status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [add_on, base_image, commit, components, hardware_support, impact, notifications, scan_time, solutions, status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN, :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = VSphereAutomation::ESX.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
  end
end
