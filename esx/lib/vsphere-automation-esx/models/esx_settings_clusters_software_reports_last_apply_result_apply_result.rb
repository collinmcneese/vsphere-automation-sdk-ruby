# Copyright (c) 2018-2019 VMware, Inc.  All Rights Reserved.
# SPDX-License-Identifier: MIT

# DO NOT MODIFY. THIS CODE IS GENERATED. CHANGES WILL BE OVERWRITTEN.

# esx - No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)


require 'date'

module VSphereAutomation
  module ESX
    class EsxSettingsClustersSoftwareReportsLastApplyResultApplyResult
    # The identifier of the commit used to fetch the desired software document to be applied to all hosts within the cluster.
    attr_accessor :commit

    # Hosts in this cluster to which the desired software document specified by the {@link #commit} failed to be applied to.
    attr_accessor :failed_hosts

    # Information of the hosts in this cluster to which the desired software document specified by the {@link #commit} should be applied to.
    attr_accessor :host_info

    # Status of the hosts in this cluster to which the desired software document specified by the {@link #commit} was applied to. Hosts on which the apply {@term operation} was sucessful are specified by {@link #successfulHosts}. Hosts on which the apply {@term operation} failed are specified by {@link #failedHosts}. Hosts which were skipped by the apply {@term operation} are specified by {@link #skippedHosts}.
    attr_accessor :host_status

    # Hosts in this cluster that were skipped by the apply {@term operation}.
    attr_accessor :skipped_hosts

    attr_accessor :status

    # Hosts in this cluster to which the desired software document specified by the {@link #commit} has been successfully applied to.
    attr_accessor :successful_hosts

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'commit' => :'commit',
        :'failed_hosts' => :'failed_hosts',
        :'host_info' => :'host_info',
        :'host_status' => :'host_status',
        :'skipped_hosts' => :'skipped_hosts',
        :'status' => :'status',
        :'successful_hosts' => :'successful_hosts'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'commit' => :'String',
        :'failed_hosts' => :'Array<String>',
        :'host_info' => :'Hash<String, EsxSettingsHostInfo>',
        :'host_status' => :'Hash<String, EsxSettingsClustersSoftwareReportsLastApplyResultApplyStatus>',
        :'skipped_hosts' => :'Array<String>',
        :'status' => :'EsxSettingsClustersSoftwareReportsLastApplyResultApplyStatus',
        :'successful_hosts' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'commit')
        self.commit = attributes[:'commit']
      end

      if attributes.has_key?(:'failed_hosts')
        if (value = attributes[:'failed_hosts']).is_a?(Array)
          self.failed_hosts = value
        end
      end

      if attributes.has_key?(:'host_info')
        if (value = attributes[:'host_info']).is_a?(Hash)
          self.host_info = value
        end
      end

      if attributes.has_key?(:'host_status')
        if (value = attributes[:'host_status']).is_a?(Hash)
          self.host_status = value
        end
      end

      if attributes.has_key?(:'skipped_hosts')
        if (value = attributes[:'skipped_hosts']).is_a?(Array)
          self.skipped_hosts = value
        end
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'successful_hosts')
        if (value = attributes[:'successful_hosts']).is_a?(Array)
          self.successful_hosts = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @commit.nil?
        invalid_properties.push('invalid value for "commit", commit cannot be nil.')
      end

      if @failed_hosts.nil?
        invalid_properties.push('invalid value for "failed_hosts", failed_hosts cannot be nil.')
      end

      if @host_info.nil?
        invalid_properties.push('invalid value for "host_info", host_info cannot be nil.')
      end

      if @host_status.nil?
        invalid_properties.push('invalid value for "host_status", host_status cannot be nil.')
      end

      if @skipped_hosts.nil?
        invalid_properties.push('invalid value for "skipped_hosts", skipped_hosts cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @successful_hosts.nil?
        invalid_properties.push('invalid value for "successful_hosts", successful_hosts cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @commit.nil?
      return false if @failed_hosts.nil?
      return false if @host_info.nil?
      return false if @host_status.nil?
      return false if @skipped_hosts.nil?
      return false if @status.nil?
      return false if @successful_hosts.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          commit == o.commit &&
          failed_hosts == o.failed_hosts &&
          host_info == o.host_info &&
          host_status == o.host_status &&
          skipped_hosts == o.skipped_hosts &&
          status == o.status &&
          successful_hosts == o.successful_hosts
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [commit, failed_hosts, host_info, host_status, skipped_hosts, status, successful_hosts].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN, :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = VSphereAutomation::ESX.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
  end
end
